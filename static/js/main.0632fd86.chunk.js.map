{"version":3,"sources":["components/wrapper.js","components/Nav/Nav.js","components/header.js","components/game.js","components/Card/Card.js","App.js","registerServiceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Nav","currentScore","highScore","Header","note","Game","Card","onClick","cardClick","id","alt","name","src","image","App","state","cards","guessedCards","sortCards","sort","b","Math","random","console","log","_this","undefined","find","card","setState","newCardsList","filter","_this2","this","wrapper","components_Nav_Nav","header","game","map","components_Card_Card","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qsDAIeA,SAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCO1CC,SANH,SAAAN,GAAK,OACfC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,UAAqDJ,EAAMO,aAA3D,kBAAwFP,EAAMQ,cCCnFC,EALA,SAAAT,GAAK,OAChBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeJ,EAAMU,QCA5BC,EAFF,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,WCWzCO,SAVF,SAAAZ,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGU,QAAS,kBAAMb,EAAMc,UAAUd,EAAMe,MACtCd,EAAAC,EAAAC,cAAA,OAAKa,IAAKhB,EAAMiB,KACdC,IAAKlB,EAAMmB,mBCyEJC,6MApEbC,MAAQ,CACNC,QACAC,aAAcD,EACdf,aAAc,EACdC,UAAW,EACXE,KAAM,2EAIRc,UAAY,WACVF,EAAMG,KAAK,SAAUvB,EAAGwB,GAAK,MAAO,GAAMC,KAAKC,cAIjDd,UAAY,SAAAC,GAOV,GANAc,QAAQC,IAAIC,EAAKV,MAAMC,OACvBO,QAAQC,IAAIC,EAAKV,MAAME,mBAKFS,IAHAD,EAAKV,MAAME,aAAaU,KAAK,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,IAIpEgB,EAAKI,SAAS,CACZZ,aAAcD,EACdd,UAAYuB,EAAKV,MAAMd,aAAewB,EAAKV,MAAMb,UAAauB,EAAKV,MAAMd,aAAewB,EAAKV,MAAMb,UACnGD,aAAc,EACdG,KAAM,2CAGH,CACL,IAAM0B,EAAeL,EAAKV,MAAME,aAAac,OAAO,SAAAH,GAAI,OAAIA,EAAKnB,KAAOA,IAExEgB,EAAKI,SAAS,CACZZ,aAAca,EACd7B,aAAcwB,EAAKV,MAAMd,aAAe,EACxCG,KAAM,qBAGVqB,EAAKP,qFAGE,IAAAc,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CACElC,aAAcgC,KAAKlB,MAAMd,aACzBC,UAAW+B,KAAKlB,MAAMb,YAExBP,EAAAC,EAAAC,cAACuC,EAAD,CACEhC,KAAM6B,KAAKlB,MAAMX,OAEnBT,EAAAC,EAAAC,cAACwC,EAAD,KACGJ,KAAKlB,MAAMC,MAAMsB,IAAI,SAAAV,GAAI,OACxBjC,EAAAC,EAAAC,cAAC0C,EAAD,CACE/B,UAAWwB,EAAKxB,UAChBC,GAAImB,EAAKnB,GACT+B,IAAKZ,EAAKnB,GACVE,KAAMiB,EAAKjB,KACXE,MAAOe,EAAKf,mBA5DR4B,aCAZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfmC,UAAUC,cAAcQ,WAK1BpC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBoC,MAAM,SAAAC,GACLtC,QAAQsC,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,eAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,eAAN,sBAEP1B,GAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBW,MAAM,WACLrC,QAAQC,IACN,mEArEAyD,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjC9B,QAAQC,IACN,+GAMJwB,EAAgBC,MCzCxBiC","file":"static/js/main.0632fd86.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props =>\n  <ul className=\"nav nav-fill\">\n    <li className=\"nav-item nav-text text-left\">such game.</li>\n    <li className=\"nav-item nav-text text-right\">score: {props.currentScore} | high score: {props.highScore}</li>\n  </ul>;\n\nexport default Nav;","import React from \"react\";\n\nconst Header = props =>\n    <div>\n        <h5 className=\"text-center\">{props.note}</h5>\n    </div>;\n\nexport default Header;","import React from \"react\";\n\nconst Game = props => <div className=\"container\">{props.children}</div>;\n\nexport default Game;","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div className=\"card mx-auto\">\n    <a onClick={() => props.cardClick(props.id)}>\n      <img alt={props.name}\n        src={props.image}\n      />\n    </a>\n  </div>\n);\n\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/wrapper\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/header\";\nimport Game from \"./components/game\";\nimport Card from \"./components/Card\";\nimport cards from \"./cards.json\";\n// import Footer from \"./components/footer\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    guessedCards: cards,\n    currentScore: 0,\n    highScore: 0,\n    note: \"WOW. so game. much fun. don't click the same photo twice or you lose.\"\n  };\n\n  // sort cards in random order\n  sortCards = () => {\n    cards.sort(function (a, b) { return 0.5 - Math.random() });\n  };\n\n  // handle card click\n  cardClick = id => {\n    console.log(this.state.cards);\n    console.log(this.state.guessedCards);\n    // see if id of clicked card is in the guessedCards array\n    const clickedCards = this.state.guessedCards.find(card => card.id === id);\n\n    // if clicked cards array is undefined, wrong guess. Reset state variables. Determine high score.\n    if (clickedCards === undefined) {\n      this.setState({\n        guessedCards: cards,\n        highScore: (this.state.currentScore > this.state.highScore) ? this.state.currentScore : this.state.highScore,\n        currentScore: 0,\n        note: \"nope. click a photo to start over.\"\n      })\n      // else, correct guess. Set guessedCards array to new filterd list\n    } else {\n      const newCardsList = this.state.guessedCards.filter(card => card.id !== id);\n\n      this.setState({\n        guessedCards: newCardsList,\n        currentScore: this.state.currentScore + 1,\n        note: \"WOW. good guess.\"\n      })\n    }\n    this.sortCards();\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Header\n          note={this.state.note}\n        />\n        <Game>\n          {this.state.cards.map(card => (\n            <Card\n              cardClick={this.cardClick}\n              id={card.id}\n              key={card.id}\n              name={card.name}\n              image={card.image}\n            />\n          ))}\n        </Game>\n        {/* <Footer /> */}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}